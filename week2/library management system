import java.io.*;
import java.util.*;


class Book implements Serializable {
    private String title;
    private String author;
    private String ISBN;
    private boolean isBorrowed;

    public Book(String title, String author, String ISBN) {
        this.title = title;
        this.author = author;
        this.ISBN = ISBN;
        this.isBorrowed = false;
    }

    public String getTitle() { return title; }
    public String getAuthor() { return author; }
    public String getISBN() { return ISBN; }
    public boolean isBorrowed() { return isBorrowed; }
    public void setBorrowed(boolean status) { this.isBorrowed = status; }
}


class User implements Serializable {
    private String name;
    private String userID;
    private List<Book> borrowedBooks;
    private static final int MAX_BOOKS = 3;

    public User(String name, String userID) {
        this.name = name;
        this.userID = userID;
        this.borrowedBooks = new ArrayList<>();
    }

    public String getName() { return name; }
    public String getUserID() { return userID; }
    public List<Book> getBorrowedBooks() { return borrowedBooks; }

    public void borrowBook(Book book) throws MaxBooksAllowedException {
        if (borrowedBooks.size() >= MAX_BOOKS) {
            throw new MaxBooksAllowedException("User has already borrowed the maximum number of books.");
        }
        borrowedBooks.add(book);
    }

    public void returnBook(Book book) {
        borrowedBooks.remove(book);
    }
}


class BookNotFoundException extends Exception {
    public BookNotFoundException(String message) { super(message); }
}

class UserNotFoundException extends Exception {
    public UserNotFoundException(String message) { super(message); }
}

class MaxBooksAllowedException extends Exception {
    public MaxBooksAllowedException(String message) { super(message); }
}


interface ILibrary {
    void borrowBook(String ISBN, String userID) throws BookNotFoundException, UserNotFoundException, MaxBooksAllowedException;
    void returnBook(String ISBN, String userID) throws BookNotFoundException, UserNotFoundException;
    void reserveBook(String ISBN, String userID) throws BookNotFoundException, UserNotFoundException;
    Book searchBook(String title);
}


abstract class LibrarySystem implements ILibrary {
    protected List<Book> books = new ArrayList<>();
    protected List<User> users = new ArrayList<>();
    public abstract void addBook(Book book);
    public abstract void addUser(User user);
}


class LibraryManager extends LibrarySystem {
    private final Object lock = new Object();

    public void addBook(Book book) { books.add(book); }
    public void addUser(User user) { users.add(user); }

    public void borrowBook(String ISBN, String userID) throws BookNotFoundException, UserNotFoundException, MaxBooksAllowedException {
        synchronized (lock) {
            Book book = books.stream().filter(b -> b.getISBN().equals(ISBN) && !b.isBorrowed()).findFirst().orElseThrow(() -> new BookNotFoundException("Book not available"));
            User user = users.stream().filter(u -> u.getUserID().equals(userID)).findFirst().orElseThrow(() -> new UserNotFoundException("User not found"));
            user.borrowBook(book);
            book.setBorrowed(true);
            System.out.println(user.getName() + " borrowed " + book.getTitle());
        }
    }

    public void returnBook(String ISBN, String userID) throws BookNotFoundException, UserNotFoundException {
        synchronized (lock) {
            User user = users.stream().filter(u -> u.getUserID().equals(userID)).findFirst().orElseThrow(() -> new UserNotFoundException("User not found"));
            Book book = books.stream().filter(b -> b.getISBN().equals(ISBN)).findFirst().orElseThrow(() -> new BookNotFoundException("Book not found"));
            user.returnBook(book);
            book.setBorrowed(false);
            System.out.println(user.getName() + " returned " + book.getTitle());
        }
    }

    public void reserveBook(String ISBN, String userID) throws BookNotFoundException, UserNotFoundException {
        System.out.println("Book reservation feature yet to be implemented");
    }

    public Book searchBook(String title) {
        return books.stream().filter(b -> b.getTitle().equalsIgnoreCase(title)).findFirst().orElse(null);
    }

    public void saveLibraryData() throws IOException {
        try (ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream("library_data.ser"))) {
            out.writeObject(books);
            out.writeObject(users);
        }
    }

    public void loadLibraryData() throws IOException, ClassNotFoundException {
        try (ObjectInputStream in = new ObjectInputStream(new FileInputStream("library_data.ser"))) {
            books = (List<Book>) in.readObject();
            users = (List<User>) in.readObject();
        }
    }
}


public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        LibraryManager libManager = new LibraryManager();
        libManager.addBook(new Book("Java Programming", "James Gosling", "12345"));
        libManager.addBook(new Book("Data Structures", "Robert Lafore", "67890"));
        libManager.addBook(new Book("python", "James Gosling", "78945"));
        libManager.addBook(new Book("c", "Robert Lafore", "58236"));
        libManager.addUser(new User("Alice", "U001"));
        libManager.addUser(new User("Bob", "U002"));
        
        while (true) {
            System.out.println("Enter 1 to borrow a book, 2 to return a book, or 'exit' to quit: ");
            String choice = scanner.nextLine();
            if (choice.equalsIgnoreCase("exit")) break;
            
            System.out.println("Enter ISBN: ");
            String isbn = scanner.nextLine();
            System.out.println("Enter User ID: ");
            String userId = scanner.nextLine();
            
            try {
                if (choice.equals("1")) {
                    libManager.borrowBook(isbn, userId);
                } else if (choice.equals("2")) {
                    libManager.returnBook(isbn, userId);
                } else {
                    System.out.println("Invalid choice. Try again.");
                }
            } catch (Exception e) {
                System.out.println(e.getMessage());
            }
        }
        
        scanner.close();
    }
}
