import java.io.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.logging.*;


class Location {
    private int aisle, shelf, bin;

    public Location(int aisle, int shelf, int bin) {
        this.aisle = aisle;
        this.shelf = shelf;
        this.bin = bin;
    }

    @Override
    public String toString() {
        return "Aisle " + aisle + ", Shelf " + shelf + ", Bin " + bin;
    }
}


class Product {
    private String productID, name;
    private int quantity;
    private Location location;

    public Product(String productID, String name, int quantity, Location location) {
        this.productID = productID;
        this.name = name;
        this.quantity = quantity;
        this.location = location;
    }

    public synchronized void updateQuantity(int change) {
        this.quantity += change;
    }

    public String getProductID() { return productID; }
    public int getQuantity() { return quantity; }
    public Location getLocation() { return location; }
}


class OutOfStockException extends Exception {
    public OutOfStockException(String message) { super(message); }
}

class InvalidLocationException extends Exception {
    public InvalidLocationException(String message) { super(message); }
}


class Order {
    enum Priority { STANDARD, EXPEDITED }
    
    private String orderID;
    private List<String> productIDs;
    private Priority priority;

    public Order(String orderID, List<String> productIDs, Priority priority) {
        this.orderID = orderID;
        this.productIDs = productIDs;
        this.priority = priority;
    }

    public String getOrderID() { return orderID; }
    public List<String> getProductIDs() { return productIDs; }
    public Priority getPriority() { return priority; }
}


class OrderComparator implements Comparator<Order> {
    @Override
    public int compare(Order o1, Order o2) {
        return o1.getPriority().compareTo(o2.getPriority());
    }
}


class InventoryManager {
    private ConcurrentHashMap<String, Product> products;
    private PriorityQueue<Order> orderQueue;
    private ExecutorService executor;
    private static final Logger logger = Logger.getLogger("InventoryLogger");

    public InventoryManager() {
        products = new ConcurrentHashMap<>();
        orderQueue = new PriorityQueue<>(new OrderComparator());
        executor = Executors.newFixedThreadPool(5);
    }

    public synchronized void addProduct(Product product) {
        products.put(product.getProductID(), product);
        logger.info("Added product: " + product.getProductID());
    }

    public synchronized void placeOrder(Order order) {
        orderQueue.add(order);
        logger.info("Order placed: " + order.getOrderID());
    }

    public void processOrders() {
        while (!orderQueue.isEmpty()) {
            Order order = orderQueue.poll();
            executor.submit(() -> fulfillOrder(order));
        }
    }

    private void fulfillOrder(Order order) {
        try {
            for (String productId : order.getProductIDs()) {
                Product product = products.get(productId);
                if (product == null || product.getQuantity() == 0) {
                    throw new OutOfStockException("Product " + productId + " is out of stock.");
                }
                product.updateQuantity(-1);
                logger.info("Order " + order.getOrderID() + " fulfilled for product: " + productId);
            }
        } catch (OutOfStockException e) {
            logger.severe(e.getMessage());
        }
    }
}


public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        InventoryManager inventoryManager = new InventoryManager();

        
        System.out.print("Enter number of products: ");
        int numProducts = scanner.nextInt();
        scanner.nextLine();

        for (int i = 0; i < numProducts; i++) {
            System.out.print("Enter Product ID: ");
            String productID = scanner.nextLine();
            System.out.print("Enter Product Name: ");
            String name = scanner.nextLine();
            System.out.print("Enter Quantity: ");
            int quantity = scanner.nextInt();
            System.out.print("Enter Aisle: ");
            int aisle = scanner.nextInt();
            System.out.print("Enter Shelf: ");
            int shelf = scanner.nextInt();
            System.out.print("Enter Bin: ");
            int bin = scanner.nextInt();
            scanner.nextLine();
            
            inventoryManager.addProduct(new Product(productID, name, quantity, new Location(aisle, shelf, bin)));
        }

        
        System.out.print("Enter number of orders: ");
        int numOrders = scanner.nextInt();
        scanner.nextLine();

        for (int i = 0; i < numOrders; i++) {
            System.out.print("Enter Order ID: ");
            String orderID = scanner.nextLine();
            System.out.print("Enter number of products in order: ");
            int numOrderProducts = scanner.nextInt();
            scanner.nextLine();
            List<String> productIDs = new ArrayList<>();
            for (int j = 0; j < numOrderProducts; j++) {
                System.out.print("Enter Product ID: ");
                productIDs.add(scanner.nextLine());
            }
            System.out.print("Enter priority (STANDARD/EXPEDITED): ");
            Order.Priority priority = Order.Priority.valueOf(scanner.nextLine().toUpperCase());
            
            inventoryManager.placeOrder(new Order(orderID, productIDs, priority));
        }

        inventoryManager.processOrders();
        scanner.close();
    }
}
